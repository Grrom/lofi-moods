{"version":3,"sources":["components/moods/mood.tsx","global-state/buffering-provider.tsx","global-state/bottom-message-provider.tsx","global-state/muted-provider.tsx","components/moods/moods.tsx","types/music.ts","components/misc/loader/loader.tsx","components/bottom-indicator/bottom-indicator.tsx","assets/mute.svg","assets/unMute.svg","assets/profile.svg","components/misc/action-button/action-button.tsx","global-state/profile-modal-provider.tsx","components/controls/controls.tsx","components/profile/login-signup.tsx","App.tsx","helpers/FirebaseHelper.ts","reportWebVitals.ts","index.tsx"],"names":["Mood","mood","playMusic","isSelected","onClick","className","a","fireBaseHelper","fetchMusic","musicList","Math","floor","random","length","BufferingContext","React","createContext","BufferingContextUpdate","value","BufferingProvider","children","useState","isBuffering","setIsBuffering","Provider","BottomMessageContext","BottomMessageContextUpdate","BottomMessageProvider","bottomMessage","setBottomMessage","MutedContext","MutedContextUpdate","useMuted","useContext","MutedProvider","isMuted","setIsMuted","current","Moods","moods","setMoods","isPlaying","setIsPlaying","selected","setSelected","music","setMusic","bg","setBg","useEffect","fetchMoods","fetchedMoods","title","id","style","backgroundImage","map","onStart","musicId","image","Image","src","onload","width","checkAndSetBg","link","onError","onBuffer","onBufferEnd","playing","muted","controls","autoPlay","url","loop","config","playerVars","height","vq","Music","artist","this","MiniLoader","BottomIndicator","message","ActionButton","isLoading","text","icon","alt","ModalProfileContext","ModalProfileContextUpdate","ModalProfileProvider","isOpen","setIsOpen","Controls","toggleMuted","toggleProfile","mute","unMute","profile","LoginSignup","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","getFirestore","getDocs","collection","querySnapshot","datas","forEach","doc","data","push","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.424df7c6.chunk.js","sourcesContent":["import { fireBaseHelper } from \"../../App\";\nimport { Music } from \"../../types/music\";\n\ninterface _props {\n  mood: string;\n  playMusic: (music: Music) => void;\n  isSelected: boolean;\n  onClick: () => void;\n}\nexport default function Mood({ mood, playMusic, isSelected, onClick }: _props) {\n  return (\n    <div\n      className={`mood ${isSelected ? \"active\" : \"\"}`}\n      onClick={async () => {\n        onClick();\n        let musicList: Array<Music> = await fireBaseHelper.fetchMusic(mood);\n        playMusic(\n          musicList[Math.floor(Math.random() * (musicList.length - 0))]\n        );\n      }}\n    >\n      {mood}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useContext } from \"react\";\nimport { providerProps } from \"../types/interfaces\";\n\nexport const BufferingContext = React.createContext(false);\nexport const BufferingContextUpdate = React.createContext(\n  (value: boolean) => {}\n);\n\nexport function useBuffering() {\n  return useContext(BufferingContext);\n}\n\nexport function useBufferingUpdate() {\n  return useContext(BufferingContextUpdate);\n}\n\nexport default function BufferingProvider({ children }: providerProps) {\n  const [isBuffering, setIsBuffering] = useState(false);\n  function toggleBuffering(value: boolean) {\n    setIsBuffering(() => value);\n  }\n  return (\n    <BufferingContext.Provider value={isBuffering}>\n      <BufferingContextUpdate.Provider value={toggleBuffering}>\n        {children}\n      </BufferingContextUpdate.Provider>\n    </BufferingContext.Provider>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useContext } from \"react\";\nimport { providerProps } from \"../types/interfaces\";\n\nexport const BottomMessageContext = React.createContext(\"\");\nexport const BottomMessageContextUpdate = React.createContext(\n  (value: string) => {}\n);\n\nexport function useBottomMessage() {\n  return useContext(BottomMessageContext);\n}\n\nexport function useBottomMessageUpdate() {\n  return useContext(BottomMessageContextUpdate);\n}\n\nexport default function BottomMessageProvider({ children }: providerProps) {\n  const [bottomMessage, setBottomMessage] = useState(\n    \"Hello, How are you today?\"\n  );\n  function updateBottomMessage(value: string) {\n    setBottomMessage(() => value);\n  }\n  return (\n    <BottomMessageContext.Provider value={bottomMessage}>\n      <BottomMessageContextUpdate.Provider value={updateBottomMessage}>\n        {children}\n      </BottomMessageContextUpdate.Provider>\n    </BottomMessageContext.Provider>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useContext } from \"react\";\nimport { providerProps } from \"../types/interfaces\";\n\nexport const MutedContext = React.createContext(false);\nexport const MutedContextUpdate = React.createContext(() => {});\n\nexport function useMuted() {\n  return useContext(MutedContext);\n}\n\nexport function useMutedUpdate() {\n  return useContext(MutedContextUpdate);\n}\n\nexport default function MutedProvider({ children }: providerProps) {\n  const [isMuted, setIsMuted] = useState(false);\n  function toggleMuted() {\n    setIsMuted((current) => !current);\n  }\n\n  return (\n    <MutedContext.Provider value={isMuted}>\n      <MutedContextUpdate.Provider value={toggleMuted}>\n        {children}\n      </MutedContextUpdate.Provider>\n    </MutedContext.Provider>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport ReactPlayer from \"react-player/youtube\";\nimport { Music } from \"../../types/music\";\nimport Mood from \"./mood\";\nimport \"./moods.scss\";\n\nimport { fireBaseHelper } from \"../../App\";\nimport { useBufferingUpdate } from \"../../global-state/buffering-provider\";\nimport { useBottomMessageUpdate } from \"../../global-state/bottom-message-provider\";\nimport { useMuted } from \"../../global-state/muted-provider\";\n\nexport default function Moods() {\n  const [moods, setMoods] = useState([] as Array<string>);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [selected, setSelected] = useState(\"\");\n  const [music, setMusic] = useState<Music>();\n  const [bg, setBg] = useState(\n    \"https://i.ytimg.com/vi/_ITiwPMUzho/maxresdefault.jpg\"\n  );\n\n  useEffect(() => {\n    async function fetchMoods() {\n      let fetchedMoods = await fireBaseHelper.fetchMoods();\n      setMoods(() => fetchedMoods);\n    }\n\n    fetchMoods();\n  }, []);\n\n  const setIsBuffering = useBufferingUpdate();\n  const setBottomMessage = useBottomMessageUpdate();\n  const isMuted = useMuted();\n\n  function playMusic(music: Music) {\n    setMusic(() => music);\n    setIsPlaying(() => true);\n    setBottomMessage(`Fetching: ${music.title}`);\n  }\n  function checkAndSetBg(musicId?: string) {\n    let image = new Image();\n    image.src = `https://i.ytimg.com/vi/${musicId}/maxresdefault.jpg`;\n    image.onload = function () {\n      if (image.width > 120) {\n        setBg(image.src);\n      } else {\n        setBg(`https://i.ytimg.com/vi/${musicId}/hqdefault.jpg`);\n      }\n    };\n  }\n\n  return (\n    <div id=\"parent\" style={{ backgroundImage: `url(${bg})` }}>\n      <div id=\"moods\">\n        {moods.map((value) => (\n          <Mood\n            onClick={() => setSelected(value)}\n            mood={value}\n            playMusic={playMusic}\n            key={value}\n            isSelected={selected === value}\n          ></Mood>\n        ))}\n        <ReactPlayer\n          className=\"react-player\"\n          onStart={() => {\n            setBottomMessage(\"Now Playing: \" + music?.title);\n            checkAndSetBg(music?.link);\n          }}\n          onError={() =>\n            setBottomMessage(\"Something went wrong while fetching the music\")\n          }\n          onBuffer={() => setIsBuffering(true)}\n          onBufferEnd={() => setIsBuffering(false)}\n          playing={isPlaying}\n          muted={isMuted}\n          controls={true}\n          autoPlay={true}\n          url={`https://www.youtube.com/watch?v=${music?.link}`}\n          loop={true}\n          config={{\n            playerVars: {\n              height: \"144px\",\n              width: \"256px\",\n              vq: \"small\",\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","export class Music {\n  artist: string;\n  link: string;\n  title: string;\n  id: string;\n\n  constructor(artist: string, link: string, title: string, id: string) {\n    this.artist = artist;\n    this.link = link;\n    this.title = title;\n    this.id = id;\n  }\n}\n","import \"./loader.scss\";\n\nexport function MiniLoader() {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"mini-loader\" />\n    </div>\n  );\n}\n\nexport function Loader() {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"loader\" />\n    </div>\n  );\n}\n","import { useBottomMessage } from \"../../global-state/bottom-message-provider\";\nimport { useBuffering } from \"../../global-state/buffering-provider\";\nimport { MiniLoader } from \"../misc/loader/loader\";\nimport \"./bottom-indicator.scss\";\n\nexport default function BottomIndicator() {\n  const isBuffering = useBuffering();\n  const message = useBottomMessage();\n\n  return (\n    <span id=\"bottom-indicator\">\n      {message}\n      {isBuffering ? <MiniLoader /> : \"\"}\n    </span>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/mute.d7f38ca3.svg\";","export default __webpack_public_path__ + \"static/media/unMute.8a278345.svg\";","export default __webpack_public_path__ + \"static/media/profile.d4070b52.svg\";","import { MiniLoader } from \"../loader/loader\";\n\nimport \"./action-button.scss\";\n\ninterface _props {\n  onClick: () => any;\n  isLoading: boolean;\n  text: string;\n  icon: string;\n  className?: string;\n}\nexport function ActionButton({\n  onClick,\n  isLoading,\n  text,\n  icon,\n  className,\n}: _props) {\n  return (\n    <span\n      className={`action-button ${className}`}\n      title={text}\n      onClick={() => {\n        onClick();\n      }}\n    >\n      {isLoading ? (\n        <MiniLoader />\n      ) : (\n        <img src={icon} alt={text} className=\"icon\" />\n      )}\n      <h4>{text} </h4>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useContext } from \"react\";\nimport { providerProps } from \"../types/interfaces\";\n\nexport const ModalProfileContext = React.createContext(false);\nexport const ModalProfileContextUpdate = React.createContext(() => {});\n\nexport function useModalProfile() {\n  return useContext(ModalProfileContext);\n}\n\nexport function useModalProfileUpdate() {\n  return useContext(ModalProfileContextUpdate);\n}\n\nexport default function ModalProfileProvider({ children }: providerProps) {\n  const [isOpen, setIsOpen] = useState(true);\n  function toggleModalProfile() {\n    setIsOpen((current) => !current);\n  }\n\n  return (\n    <ModalProfileContext.Provider value={isOpen}>\n      <ModalProfileContextUpdate.Provider value={toggleModalProfile}>\n        {children}\n      </ModalProfileContextUpdate.Provider>\n    </ModalProfileContext.Provider>\n  );\n}\n","import mute from \"../../assets/mute.svg\";\nimport unMute from \"../../assets/unMute.svg\";\nimport profile from \"../../assets/profile.svg\";\n\nimport { useMuted, useMutedUpdate } from \"../../global-state/muted-provider\";\nimport { ActionButton } from \"../misc/action-button/action-button\";\n\nimport \"./controls.scss\";\nimport { useModalProfileUpdate } from \"../../global-state/profile-modal-provider\";\n\nexport default function Controls() {\n  const toggleMuted = useMutedUpdate();\n  const isMuted = useMuted();\n\n  const toggleProfile = useModalProfileUpdate();\n  return (\n    <div id=\"controls\">\n      <ActionButton\n        onClick={() => toggleMuted()}\n        isLoading={false}\n        text={\"\"}\n        icon={isMuted ? mute : unMute}\n        className=\"mute-button\"\n      />\n      <ActionButton\n        onClick={() => toggleProfile()}\n        isLoading={false}\n        text={\"\"}\n        icon={profile}\n        className=\"mute-button\"\n      />\n    </div>\n  );\n}\n","import Modal from \"react-modal\";\nimport { useModalProfile } from \"../../global-state/profile-modal-provider\";\n\nexport default function LoginSignup() {\n  const isOpen = useModalProfile();\n\n  return <Modal isOpen={isOpen}>hello world</Modal>;\n}\n","import \"./App.scss\";\n\nimport Moods from \"./components/moods/moods\";\nimport FireBaseHelper from \"./helpers/FirebaseHelper\";\nimport { initializeApp } from \"firebase/app\";\nimport BottomIndicator from \"./components/bottom-indicator/bottom-indicator\";\nimport BufferingProvider from \"./global-state/buffering-provider\";\nimport BottomMessageProvider from \"./global-state/bottom-message-provider\";\nimport Controls from \"./components/controls/controls\";\nimport MutedProvider from \"./global-state/muted-provider\";\nimport ModalProvider from \"./global-state/profile-modal-provider\";\nimport LoginSignup from \"./components/profile/login-signup\";\n\ninitializeApp({\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n});\n\nexport const fireBaseHelper = new FireBaseHelper();\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <BufferingProvider>\n        <BottomMessageProvider>\n          <MutedProvider>\n            <ModalProvider>\n              <Controls />\n              <Moods />\n              <LoginSignup />\n            </ModalProvider>\n          </MutedProvider>\n          <BottomIndicator />\n        </BottomMessageProvider>\n      </BufferingProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { collection, getDocs } from \"firebase/firestore\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { Music } from \"../types/music\";\n\nexport default class FireBaseHelper {\n  firestore = getFirestore();\n\n  public fetchMusic = async (mood: string): Promise<Array<Music>> => {\n    const querySnapshot = await getDocs(collection(this.firestore, mood));\n    let datas: Array<Music> = [];\n    querySnapshot.forEach((doc) => {\n      let data = doc.data();\n      datas.push(new Music(data.artist, data.link, data.title, doc.id));\n    });\n    return datas;\n  };\n\n  public fetchMoods = async (): Promise<Array<string>> => {\n    const querySnapshot = await getDocs(collection(this.firestore, \"moods\"));\n    let datas: Array<string> = [];\n    querySnapshot.forEach((doc) => {\n      let data = doc.data();\n      datas.push(data.name);\n    });\n    return datas;\n  };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}