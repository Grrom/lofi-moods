{"version":3,"sources":["components/misc/loader/loader.tsx","components/misc/action-button/action-button.tsx","components/moods/mood.tsx","assets/mute.svg","assets/unMute.svg","global-state/buffering-provider.tsx","global-state/bottom-message-provider.tsx","components/moods/moods.tsx","types/music.ts","components/bottom-indicator/bottom-indicator.tsx","App.tsx","helpers/FirebaseHelper.ts","reportWebVitals.ts","index.tsx"],"names":["MiniLoader","className","ActionButton","onClick","isLoading","text","icon","title","src","alt","Mood","mood","playMusic","isSelected","a","fireBaseHelper","fetchMusic","musicList","Math","floor","random","length","BufferingContext","React","createContext","BufferingContextUpdate","value","BufferingProvider","children","useState","isBuffering","setIsBuffering","Provider","BottomMessageContext","BottomMessageContextUpdate","BottomMessageProvider","bottomMessage","setBottomMessage","Moods","moods","setMoods","isPlaying","setIsPlaying","selected","setSelected","isMuted","setIsMuted","music","setMusic","bg","setBg","useEffect","fetchMoods","fetchedMoods","useContext","id","style","backgroundImage","current","mute","unMute","map","onStart","musicId","image","Image","onload","width","checkAndSetBg","link","onError","onBuffer","onBufferEnd","playing","muted","controls","autoPlay","url","loop","config","playerVars","height","vq","Music","artist","this","BottomIndicator","message","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","getFirestore","getDocs","collection","querySnapshot","datas","forEach","doc","data","push","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81812531.chunk.js","sourcesContent":["import \"./loader.scss\";\n\nexport function MiniLoader() {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"mini-loader\" />\n    </div>\n  );\n}\n\nexport function Loader() {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"loader\" />\n    </div>\n  );\n}\n","import { MiniLoader } from \"../loader/loader\";\n\nimport \"./action-button.scss\";\n\ninterface _props {\n  onClick: () => any;\n  isLoading: boolean;\n  text: string;\n  icon: string;\n  className?: string;\n}\nexport function ActionButton({\n  onClick,\n  isLoading,\n  text,\n  icon,\n  className,\n}: _props) {\n  return (\n    <span\n      className={`action-button ${className}`}\n      title={text}\n      onClick={() => {\n        onClick();\n      }}\n    >\n      {isLoading ? (\n        <MiniLoader />\n      ) : (\n        <img src={icon} alt={text} className=\"icon\" />\n      )}\n      <h4>{text} </h4>\n    </span>\n  );\n}\n","import { fireBaseHelper } from \"../../App\";\nimport { Music } from \"../../types/music\";\n\ninterface _props {\n  mood: string;\n  playMusic: (music: Music) => void;\n  isSelected: boolean;\n  onClick: () => void;\n}\nexport default function Mood({ mood, playMusic, isSelected, onClick }: _props) {\n  return (\n    <div\n      className={`mood ${isSelected ? \"active\" : \"\"}`}\n      onClick={async () => {\n        onClick();\n        let musicList: Array<Music> = await fireBaseHelper.fetchMusic(mood);\n        playMusic(\n          musicList[Math.floor(Math.random() * (musicList.length - 0))]\n        );\n      }}\n    >\n      {mood}\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/mute.d7f38ca3.svg\";","export default __webpack_public_path__ + \"static/media/unMute.8a278345.svg\";","import React, { useState } from \"react\";\nimport { useContext } from \"react\";\n\nexport const BufferingContext = React.createContext(false);\nexport const BufferingContextUpdate = React.createContext(\n  (value: boolean) => {}\n);\n\nexport function useBuffering() {\n  return useContext(BufferingContext);\n}\n\nexport function useBufferingUpdate() {\n  return useContext(BufferingContextUpdate);\n}\n\ninterface _props {\n  children: JSX.Element;\n}\n\nexport default function BufferingProvider({ children }: _props) {\n  const [isBuffering, setIsBuffering] = useState(false);\n  function toggleBuffering(value: boolean) {\n    setIsBuffering(() => value);\n  }\n  return (\n    <BufferingContext.Provider value={isBuffering}>\n      <BufferingContextUpdate.Provider value={toggleBuffering}>\n        {children}\n      </BufferingContextUpdate.Provider>\n    </BufferingContext.Provider>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useContext } from \"react\";\n\nexport const BottomMessageContext = React.createContext(\"\");\nexport const BottomMessageContextUpdate = React.createContext(\n  (value: string) => {}\n);\n\nexport function useBottomMessage() {\n  return useContext(BottomMessageContext);\n}\n\nexport function useBottomMessageUpdate() {\n  return useContext(BottomMessageContextUpdate);\n}\n\ninterface _props {\n  children: Array<JSX.Element>;\n}\n\nexport default function BottomMessageProvider({ children }: _props) {\n  const [bottomMessage, setBottomMessage] = useState(\n    \"Hello, How are you today?\"\n  );\n  function updateBottomMessage(value: string) {\n    setBottomMessage(() => value);\n  }\n  return (\n    <BottomMessageContext.Provider value={bottomMessage}>\n      <BottomMessageContextUpdate.Provider value={updateBottomMessage}>\n        {children}\n      </BottomMessageContextUpdate.Provider>\n    </BottomMessageContext.Provider>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport ReactPlayer from \"react-player/youtube\";\nimport { Music } from \"../../types/music\";\nimport { ActionButton } from \"../misc/action-button/action-button\";\nimport Mood from \"./mood\";\nimport \"./moods.scss\";\n\nimport mute from \"../../assets/mute.svg\";\nimport unMute from \"../../assets/unMute.svg\";\nimport { fireBaseHelper } from \"../../App\";\nimport { useBufferingUpdate } from \"../../global-state/buffering-provider\";\nimport { useBottomMessageUpdate } from \"../../global-state/bottom-message-provider\";\n\nexport default function Moods() {\n  const [moods, setMoods] = useState([] as Array<string>);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [selected, setSelected] = useState(\"\");\n  const [isMuted, setIsMuted] = useState(false);\n  const [music, setMusic] = useState<Music>();\n  const [bg, setBg] = useState(\n    \"https://i.ytimg.com/vi/_ITiwPMUzho/maxresdefault.jpg\"\n  );\n\n  useEffect(() => {\n    async function fetchMoods() {\n      let fetchedMoods = await fireBaseHelper.fetchMoods();\n      setMoods(() => fetchedMoods);\n    }\n\n    fetchMoods();\n  }, []);\n\n  const setIsBuffering = useBufferingUpdate();\n  const setBottomMessage = useBottomMessageUpdate();\n\n  function playMusic(music: Music) {\n    setMusic(() => music);\n    setIsPlaying(() => true);\n    setBottomMessage(`Fetching: ${music.title}`);\n  }\n  function checkAndSetBg(musicId?: string) {\n    let image = new Image();\n    image.src = `https://i.ytimg.com/vi/${musicId}/maxresdefault.jpg`;\n    image.onload = function () {\n      if (image.width > 120) {\n        setBg(image.src);\n      } else {\n        setBg(`https://i.ytimg.com/vi/${musicId}/hqdefault.jpg`);\n      }\n    };\n  }\n\n  return (\n    <div id=\"parent\" style={{ backgroundImage: `url(${bg})` }}>\n      <ActionButton\n        onClick={() => setIsMuted((current) => !current)}\n        isLoading={false}\n        text={\"\"}\n        icon={isMuted ? mute : unMute}\n        className=\"mute-button\"\n      />\n      <div id=\"moods\">\n        {moods.map((value) => (\n          <Mood\n            onClick={() => setSelected(value)}\n            mood={value}\n            playMusic={playMusic}\n            key={value}\n            isSelected={selected === value}\n          ></Mood>\n        ))}\n        <ReactPlayer\n          className=\"react-player\"\n          onStart={() => {\n            setBottomMessage(\"Now Playing: \" + music?.title);\n            checkAndSetBg(music?.link);\n          }}\n          onError={() =>\n            setBottomMessage(\"Something went wrong while fetching the music\")\n          }\n          onBuffer={() => setIsBuffering(true)}\n          onBufferEnd={() => setIsBuffering(false)}\n          playing={isPlaying}\n          muted={isMuted}\n          controls={true}\n          autoPlay={true}\n          url={`https://www.youtube.com/watch?v=${music?.link}`}\n          loop={true}\n          config={{\n            playerVars: {\n              height: \"144px\",\n              width: \"256px\",\n              vq: \"small\",\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","export class Music {\n  artist: string;\n  link: string;\n  title: string;\n  id: string;\n\n  constructor(artist: string, link: string, title: string, id: string) {\n    this.artist = artist;\n    this.link = link;\n    this.title = title;\n    this.id = id;\n  }\n}\n","import { useBottomMessage } from \"../../global-state/bottom-message-provider\";\nimport { useBuffering } from \"../../global-state/buffering-provider\";\nimport { MiniLoader } from \"../misc/loader/loader\";\nimport \"./bottom-indicator.scss\";\n\nexport default function BottomIndicator() {\n  const isBuffering = useBuffering();\n  const message = useBottomMessage();\n\n  return (\n    <span id=\"bottom-indicator\">\n      {message}\n      {isBuffering ? <MiniLoader /> : \"\"}\n    </span>\n  );\n}\n","import \"./App.scss\";\n\nimport Moods from \"./components/moods/moods\";\nimport FireBaseHelper from \"./helpers/FirebaseHelper\";\nimport { initializeApp } from \"firebase/app\";\nimport BottomIndicator from \"./components/bottom-indicator/bottom-indicator\";\nimport BufferingProvider from \"./global-state/buffering-provider\";\nimport BottomMessageProvider from \"./global-state/bottom-message-provider\";\n\ninitializeApp({\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n});\n\nexport const fireBaseHelper = new FireBaseHelper();\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <BufferingProvider>\n        <BottomMessageProvider>\n          <Moods></Moods>\n          <BottomIndicator />\n        </BottomMessageProvider>\n      </BufferingProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { collection, getDocs } from \"firebase/firestore\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { Music } from \"../types/music\";\n\nexport default class FireBaseHelper {\n  firestore = getFirestore();\n\n  public fetchMusic = async (mood: string): Promise<Array<Music>> => {\n    const querySnapshot = await getDocs(collection(this.firestore, mood));\n    let datas: Array<Music> = [];\n    querySnapshot.forEach((doc) => {\n      let data = doc.data();\n      datas.push(new Music(data.artist, data.link, data.title, doc.id));\n    });\n    return datas;\n  };\n\n  public fetchMoods = async (): Promise<Array<string>> => {\n    const querySnapshot = await getDocs(collection(this.firestore, \"moods\"));\n    let datas: Array<string> = [];\n    querySnapshot.forEach((doc) => {\n      let data = doc.data();\n      datas.push(data.name);\n    });\n    return datas;\n  };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}